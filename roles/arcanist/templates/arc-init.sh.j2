#!/bin/bash
#
# ARG_POSITIONAL_SINGLE([action],[Valid actions are 'generic', 'gradle', 'maven' and 'npm'.],[])
# ARG_OPTIONAL_REPEATED([extra],[e],[Additional config files. Valid values are: 'ansible', 'teamcity', 'docs'.],['ansible' 'docs' 'teamcity'])
# ARG_OPTIONAL_SINGLE([platform-name],[p],[Platform name the module (project) belongs to, e.g. 'core', 'services', 'reporting', 'ui', 'test', 'devxp'],[""])
# ARG_OPTIONAL_SINGLE([module-name],[m],[Module (project) name. Should be same as repo name in bitbucket. Defaults to current directory name, if not provided],[""])
# ARG_HELP([Utility script to initialize a code directory for arcanist.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die() {
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}

begins_with_short_option() {
  local first_option all_short_options='epmh'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_extra=()
_arg_platform_name=""
_arg_module_name=""

print_help() {
  printf '%s\n' "Utility script to initialize a code directory for arcanist."
  printf 'Usage: %s [-e|--extra <arg>] [-p|--platform-name <arg>] [-m|--module-name <arg>] [-h|--help] <action>\n' "$0"
  printf '\t%s\n' "<action>: Valid actions are 'generic', 'gradle', 'maven' and 'npm'."
  printf '\t%s\n' "-e, --extra: Additional config files. Valid values are: 'ansible', 'teamcity', 'docs'. (empty by default)"
  printf '\t%s\n' "-p, --platform-name: Platform name the module (project) belongs to, e.g. 'core', 'services', 'reporting', 'ui', 'test', 'devxp' (default: '""')"
  printf '\t%s\n' "-m, --module-name: Module (project) name. Should be same as repo name in bitbucket. Defaults to current directory name, if not provided (default: '""')"
  printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
  _positionals_count=0
  while test $# -gt 0; do
    _key="$1"
    case "$_key" in
    -e | --extra)
      test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
      _arg_extra+=("$2")
      shift
      ;;
    --extra=*)
      _arg_extra+=("${_key##--extra=}")
      ;;
    -e*)
      _arg_extra+=("${_key##-e}")
      ;;
    -p | --platform-name)
      test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
      _arg_platform_name="$2"
      shift
      ;;
    --platform-name=*)
      _arg_platform_name="${_key##--platform-name=}"
      ;;
    -p*)
      _arg_platform_name="${_key##-p}"
      ;;
    -m | --module-name)
      test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
      _arg_module_name="$2"
      shift
      ;;
    --module-name=*)
      _arg_module_name="${_key##--module-name=}"
      ;;
    -m*)
      _arg_module_name="${_key##-m}"
      ;;
    -h | --help)
      print_help
      exit 0
      ;;
    -h*)
      print_help
      exit 0
      ;;
    *)
      _last_positional="$1"
      _positionals+=("$_last_positional")
      _positionals_count=$((_positionals_count + 1))
      ;;
    esac
    shift
  done
}

handle_passed_args_count() {
  local _required_args_string="'action'"
  test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
  test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}

assign_positional_args() {
  local _positional_name _shift_for=$1
  _positional_names="_arg_action "

  shift "$_shift_for"
  for _positional_name in ${_positional_names}; do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
set -eE

export elhub_module_name="${_arg_module_name}"
if [ "$_arg_module_name" == "" ]; then
  dirname=$(pwd)
  module_name="${dirname%"${dirname##*[!/]}"}" # extglob-free multi-trailing-/ trim
  module_name="${module_name##*/}"             # remove everything before the last /
  export elhub_module_name=${module_name:-/}   # correct for dirname=/ case
fi

allowed_platform_names=("core" "services" "reporting" "ui" "test" "devxp")
if [[ ! " ${allowed_platform_names[*]} " =~ "$_arg_platform_name" ]]; then
  echo "Invalid value for '-p' option."
  print_help
  exit 1
fi
export elhub_platform_name="${_arg_platform_name}"

# shellcheck disable=SC1083
TEMPLATE_PATH={{ install_path }}/templates/repo

function envsubst_file() {
  local in_file="${TEMPLATE_PATH}/$1"
  local out_file="$1"
  if [ -n "$2" ]; then
    out_file=$2
  fi

  if [[ ! -f "$out_file" ]]; then
    envsubst <"$in_file" >"$out_file"
  fi
}

function copy_template() {
  local template_file="${TEMPLATE_PATH}/$1"
  local destination="$2"
  cp "$template_file" "$destination"
}

# shellcheck disable=SC2154
if ! echo "$_arg_action" | grep -E '(generic|gradle|maven|npm)' >/dev/null; then
  print_help
  exit 1
fi

copy_template "arcconfig-${_arg_action}-template" .arcconfig
copy_template "arclint-template" .arclint
envsubst_file "CODEOWNERS-template" CODEOWNERS
copy_template "CONTRIBUTING-template.md" CONTRIBUTING.md
copy_template "dockerignore-template" .dockerignore
copy_template "gitattributes-template" .gitattributes
copy_template "gitignore-template" .gitignore
copy_template "LICENSE-template" LICENSE
envsubst_file "README-template.md" README.md # QUESTION do we really want to update README on each 'arc init'?

# Copy maven files for maven projects
if echo "$_arg_action" | grep -E 'maven' >/dev/null; then
  envsubst_file 'maven/pom.xml' 'pom.xml'
  cp -rn "${TEMPLATE_PATH}"/maven/. . # don't replace existing configs
fi

# Copy gradle files for gradle projects
if echo "$_arg_action" | grep -E 'gradle' >/dev/null; then
  envsubst_file 'gradle/build.gradle.kts' 'build.gradle.kts'
  envsubst_file 'gradle/settings.gradle.kts' 'settings.gradle.kts'
  cp -rn "${TEMPLATE_PATH}"/gradle/. . # don't replace existing configs
fi

# Copy ansible files
if [[ "${_arg_extra[*]}" =~ "ansible" ]]; then
  copy_template "yamllint-template" .yamllint
  copy_template "ansible-lint-template" .ansible-lint
  mkdir -p ansible
  envsubst_file 'ansible/README.md'
  cp -rn "${TEMPLATE_PATH}"/ansible . # don't replace existing configs
fi

# Copy docs files
if [[ "${_arg_extra[*]}" =~ "docs" ]]; then
  mkdir -p docs/sysdocs
  envsubst_file 'docs/sysdocs/risks.md'
  cp -rn "${TEMPLATE_PATH}"/docs . # don't replace existing configs
fi

# Copy teamcity files
if [[ "${_arg_extra[*]}" =~ "teamcity" ]]; then
  mkdir -p .teamcity
  envsubst_file teamcity/settings-"${_arg_action}"-template.kts '.teamcity/settings.kts'
  copy_template "teamcity/pom-template.xml" .teamcity/pom.xml
fi

# ] <-- needed because of Argbash

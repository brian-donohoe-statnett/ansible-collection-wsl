---
- name: Set SDKMAN user/group vars
  set_fact:
    sdkman_user: "{{ sdkman_user | default(ansible_user_id) }}"
    sdkman_group: "{{ sdkman_group | default(ansible_user_gid) }}"

- name: Check for SDKMAN installation
  stat:
    path: "{{ sdkman_dir }}/bin/sdkman-init.sh"
  register: sdkman_init

# Install SDKMAN if not uninstalled
- block:
    - name: Download SDKMAN
      get_url:
        url: https://get.sdkman.io
        dest: '{{ sdkman_tmp_dir }}/sdkman_script'
        owner: '{{ sdkman_user }}'
        group: '{{ sdkman_group }}'
        validate_certs: '{{ sdkman_validate_ssl }}'

    - name: Run SDKMAN script
      environment:
        SDKMAN_DIR: '{{ sdkman_dir }}'
      command: /bin/bash {{ sdkman_tmp_dir }}/sdkman_script
      args:
        creates: '{{ sdkman_dir }}/bin/sdkman-init.sh'
      notify: Cleanup SDKMAN script

  when: not sdkman_init.stat.exists
  become: '{{ sdkman_user != ansible_user_id }}'
  become_user: '{{ sdkman_user }}'

- name: Fix permissions on SDKMAN_DIR
  file:
    path: '{{ sdkman_dir }}'
    state: directory
    owner: '{{ sdkman_user }}'
    group: '{{ sdkman_group }}'
    recurse: true
  become: yes
  tags:
    - sdkman_privilege

- name: Update SDKMAN
  shell: ". {{ sdkman_dir }}/bin/sdkman-init.sh && sdk selfupdate"
  args:
    executable: /bin/bash
  register: sdk_selfupdate
  changed_when: sdk_selfupdate.stdout != 'No update available at this time.'

- name: Persist additional SDKMAN environment variables
  include_tasks: sdkman_env.yml

- name: Flush SDK caches
  shell: source {{ sdkman_dir }}/bin/sdkman-init.sh && sdk flush
  args:
    executable: /bin/bash
  changed_when: false
